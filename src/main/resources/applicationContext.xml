<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">
	<!--com.mchange.v2.c3p0.ComboPooledDataSource -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath*:**/druid-pool.properties</value>
			</list>
		</property>
	</bean>
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		destroy-method="close">
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
		<property name="driverClassName" value="${driverClassName}" />
		<property name="filters" value="${filters}" />

		<property name="maxActive" value="${maxActive}" />
		<property name="initialSize" value="${initialSize}" />
		<property name="maxWait" value="${maxWait}" />
		<property name="minIdle" value="${minIdle}" />

		<property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}" />
		<property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}" />

		<property name="validationQuery" value="${validationQuery}" />
		<property name="testWhileIdle" value="${testWhileIdle}" />
		<property name="testOnBorrow" value="${testOnBorrow}" />
		<property name="testOnReturn" value="${testOnReturn}" />
		<property name="maxOpenPreparedStatements" value="${maxOpenPreparedStatements}" />
		<property name="removeAbandoned" value="${removeAbandoned}" /> <!-- 打开removeAbandoned功能 -->
		<property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}" /> <!-- 1800秒，也就是30分钟 -->
		<property name="logAbandoned" value="${logAbandoned}" /> <!-- 关闭abanded连接时输出错误日志 -->
	</bean>
	
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
		<property name="schemaUpdate" value="true"/>
        <!-- Scan packages for JPA annotations -->
        <property name="packagesToScan" value="entity"/>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				
				<!-- 添加新的hibernate配置（开始），cai -->
				<prop key="connection.url">jdbc:mysql://localhost:3306/byjx</prop>
				<prop key="connection.username">root</prop>
				<prop key="connection.password">root</prop>
				<prop key="connection.driver_class">com.mysql.jdbc.Driver</prop>
				<prop key="myeclipse.connection.profile">byjx</prop>
				<prop key="hbm2ddl.auto">update</prop>
				<!-- 添加新的hibernate配置（结束），cai -->
				
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.use_sql_comments">true</prop>
				<prop key="hibernate.connection.autocommit">true</prop>
			</props>
		</property>
		<property name="mappingResources">
			<list>
				<!-- 需要继续添加需要的hbm.xml -->
 				<value>pojos/Staff.hbm.xml</value>
 				<value>pojos/Department.hbm.xml</value>
 				<value>pojos/Journal.hbm.xml</value>
 				<value>pojos/Cost.hbm.xml</value>
 				<value>pojos/Role.hbm.xml</value>
 				<value>pojos/Resource.hbm.xml</value>
 				<value>pojos/Right.hbm.xml</value>
 				<value>pojos/VisitReport.hbm.xml</value>
			</list>
		</property>
		<property name="eventListeners">
            <map>
                <entry key="merge">
                    <bean class="org.springframework.orm.hibernate3.support.IdTransferringMergeEventListener"/>
                </entry>
            </map>
        </property>
	</bean>


	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<!-- 指定刚才配置好的sessionFactory 11 -->
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<!-- transactionProxy 父类 -->
	<bean id="transactionBase"
		class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean"
		lazy-init="true" abstract="true">
		<!-- 配置事务管理器 -->
		<property name="transactionManager">
			<ref bean="transactionManager" />
		</property>
		<!-- 配置事务属性 -->
		<property name="transactionAttributes">
			<props>
				<prop key="delete*">PROPAGATION_REQUIRED</prop>
				<prop key="remove*">PROPAGATION_REQUIRED</prop>
				<prop key="add*">PROPAGATION_REQUIRED</prop>
				<prop key="update*">PROPAGATION_REQUIRED</prop>
				<prop key="save*">PROPAGATION_REQUIRED</prop>
				<prop key="find*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="list*">PROPAGATION_REQUIRED,readOnly</prop>
			</props>
		</property>
	</bean>

	<!-- 配置所有的**DaoHib 作者：cai ——start -->
	<!-- 配置departmentDaoHib -->
	<bean id="departmentDao" class="dao.hibernate.DepartmentDaoHib ">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	
	<!-- 配置staffDaoHib -->
	<bean id="staffDao" class="dao.hibernate.StaffDaoHib">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	
	<!-- 配置journalDaoHib -->
	<bean id="journalDao" class="dao.hibernate.JournalDaoHib ">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	
	<!-- 配置costDaoHib -->
	<bean id="costDao" class="dao.hibernate.CostDaoHib ">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	
	<!-- 配置roleDaoHib -->
	<bean id="roleDao" class="dao.hibernate.RoleDaoHib ">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	
	<!-- 配置RightDaoHib -->
	<bean id="rightDao" class="dao.hibernate.RightDaoHib ">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	
	<!-- 配置ResourceDaoHib -->
	<bean id="resourceDao" class="dao.hibernate.ResourceDaoHib ">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	
	<!-- 配置visitReportDaoHib -->
	<bean id="visitReportDao" class="dao.hibernate.VisitReportDaoHib ">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	<!-- 配置所有的**DaoHib 作者：cai ——end -->
	
	
	<!-- 配置所有的**Service 作者：cai ——start -->
	<!-- 配置departmentService -->
	<bean id="departmentService" class="service.impl.DepartmentServiceImpl">
		<property name="genericDao" ref="departmentDao"/>
		<property name="departmentDao" ref="departmentDao"/>
		<property name="staffDao" ref="staffDao"/>
	</bean>
	
	<!-- 配置staffService -->
	<bean id="staffService" class="service.impl.StaffServiceImpl">
		<property name="genericDao" ref="staffDao"/>
		<property name="staffDao" ref="staffDao"/>
	</bean>
	 
	<!-- 配置journalService -->
	<bean id="journalService" class="service.impl.JournalServiceImpl">
		<property name="genericDao" ref="journalDao"/>
		<property name="journalDao" ref="journalDao"/>
	</bean>
	
	<!-- 配置costService -->
	<bean id="costService" class="service.impl.CostServiceImpl">
		<property name="genericDao" ref="costDao"/>
		<property name="costDao" ref="costDao"/>
	</bean>
	
	<!-- 配置roleService -->
	<bean id="roleService" class="service.impl.RoleServiceImpl">
		<property name="genericDao" ref="roleDao"/>
		<property name="roleDao" ref="roleDao"/>
	</bean>
	
	<!-- 配置rightService -->
	<bean id="rightService" class="service.impl.RightServiceImpl">
		<property name="genericDao" ref="rightDao"/>
		<property name="rightDao" ref="rightDao"/>
		<property name="roleDao" ref="roleDao"/>
	</bean>
	
	<!-- 配置resourceService -->
	<bean id="resourceService" class="service.impl.ResourceServiceImpl">
		<property name="genericDao" ref="resourceDao"/>
		<property name="resourceDao" ref="resourceDao"/>
	</bean>
	
	<!-- 配置visitReportService -->
	<bean id="visitReportService" class="service.impl.VisitReportServiceImpl">
		<property name="genericDao" ref="visitReportDao"/>
		<property name="visitReportDao" ref="visitReportDao"/>
	</bean>
	<!-- 配置所有的**Service 作者：cai ——end -->
	
	
	<!-- 配置所有的**ServiceDaoProxy 作者：cai ——start -->
	<!-- 配置departmentServiceDaoProxy -->
	<bean id="departmentServiceDaoProxy" parent="transactionBase">
		<property name="target" ref="departmentService"/>
	</bean>
	
	<!-- 配置staffServiceDaoProxy -->
	<bean id="staffServiceDaoProxy" parent="transactionBase">
		<property name="target" ref="staffService"/>
	</bean>
	<!-- 配置journalServiceDaoProxy -->
	<bean id="journalServiceDaoProxy" parent="transactionBase">
		<property name="target" ref="journalService"/>
	</bean>
	
	<!-- 配置costServiceDaoProxy -->
	<bean id="costServiceDaoProxy" parent="transactionBase">
		<property name="target" ref="costService"/>
	</bean>
	
	<!-- 配置roleServiceDaoProxy -->
	<bean id="roleServiceDaoProxy" parent="transactionBase">
		<property name="target" ref="roleService"/>
	</bean>
	
	<!-- 配置rightServiceDaoProxy -->
	<bean id="rightServiceDaoProxy" parent="transactionBase">
		<property name="target" ref="rightService"/>
	</bean>
	
	<!-- 配置resourceServiceDaoProxy -->
	<bean id="resourceServiceDaoProxy" parent="transactionBase">
		<property name="target" ref="resourceService"/>
	</bean>
	
	<!-- 配置visitReportServiceDaoProxy -->
	<bean id="visitReportServiceDaoProxy" parent="transactionBase">
		<property name="target" ref="visitReportService"/>
	</bean>
	<!-- 配置所有的**ServiceDaoProxy 作者：cai ——end -->
	
	
	<!-- 配置所有的**Action 作者：cai ——start -->
	<!-- 配置departmentAction -->
	<bean id="departmentAction" class="web.action.DepartmentAction" scope="prototype">
		<property name="departmentService" ref="departmentServiceDaoProxy"/>
	</bean>
	
	<!-- 配置staffAction -->
	<bean id="staffAction" class="web.action.StaffAction" scope="prototype">
		<property name="staffService" ref="staffServiceDaoProxy"/>
		<property name="departmentService" ref="departmentServiceDaoProxy"/>
		<property name="roleService" ref="roleServiceDaoProxy"/>
		
	</bean>
	
	<!-- 配置journalAction -->
	<bean id="journalAction" class="web.action.JournalAction" scope="prototype">
		<property name="journalService" ref="journalServiceDaoProxy"/>
		<property name="staffService" ref="staffServiceDaoProxy"/>
	</bean>
	
	<!-- 配置costAction -->
	<bean id="costAction" class="web.action.CostAction" scope="prototype">
		<property name="costService" ref="costServiceDaoProxy"/>
		<property name="staffService" ref="staffServiceDaoProxy"/>
	</bean>
	
	<!-- 配置roleAction -->
	<bean id="roleAction" class="web.action.RoleAction" scope="prototype">
		<property name="roleService" ref="roleServiceDaoProxy"/>
	</bean>
	
	<!-- 配置rightAction -->
	<bean id="rightAction" class="web.action.RightAction" scope="prototype">
		<property name="rightService" ref="rightServiceDaoProxy"/>
	</bean>
	
	<!-- 配置resourceAction -->
	<bean id="resourceAction" class="web.action.ResourceAction" scope="prototype">
		<property name="resourceService" ref="resourceServiceDaoProxy"/>
		<property name="rightService" ref="rightServiceDaoProxy"/>
	</bean>
	
	<!-- 配置visitReportAction -->
	<bean id="visitReportAction" class="web.action.VisitReportAction" scope="prototype">
		<property name="visitReportService" ref="visitReportServiceDaoProxy"/>
		<property name="staffService" ref="staffServiceDaoProxy"/>
	</bean>
	<!-- 配置所有的**Action 作者：cai ——end -->
	
</beans>